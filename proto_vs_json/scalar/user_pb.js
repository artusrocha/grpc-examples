/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.my.system.person.Geo', null, global);
goog.exportSymbol('proto.my.system.person.Location', null, global);
goog.exportSymbol('proto.my.system.person.Login', null, global);
goog.exportSymbol('proto.my.system.person.Name', null, global);
goog.exportSymbol('proto.my.system.person.Picture', null, global);
goog.exportSymbol('proto.my.system.person.Street', null, global);
goog.exportSymbol('proto.my.system.person.TZ', null, global);
goog.exportSymbol('proto.my.system.person.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.User.displayName = 'proto.my.system.person.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.User.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    gender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: (f = msg.getName()) && proto.my.system.person.Name.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    login: (f = msg.getLogin()) && proto.my.system.person.Login.toObject(includeInstance, f),
    picture: (f = msg.getPicture()) && proto.my.system.person.Picture.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.my.system.person.Location.toObject(includeInstance, f),
    isactive: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.User}
 */
proto.my.system.person.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.User;
  return proto.my.system.person.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.User}
 */
proto.my.system.person.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    case 2:
      var value = new proto.my.system.person.Name;
      reader.readMessage(value,proto.my.system.person.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = new proto.my.system.person.Login;
      reader.readMessage(value,proto.my.system.person.Login.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 5:
      var value = new proto.my.system.person.Picture;
      reader.readMessage(value,proto.my.system.person.Picture.deserializeBinaryFromReader);
      msg.setPicture(value);
      break;
    case 6:
      var value = new proto.my.system.person.Location;
      reader.readMessage(value,proto.my.system.person.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.my.system.person.Name.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.my.system.person.Login.serializeBinaryToWriter
    );
  }
  f = message.getPicture();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.my.system.person.Picture.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.my.system.person.Location.serializeBinaryToWriter
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string gender = 1;
 * @return {string}
 */
proto.my.system.person.User.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.my.system.person.User.prototype.setGender = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Name name = 2;
 * @return {?proto.my.system.person.Name}
 */
proto.my.system.person.User.prototype.getName = function() {
  return /** @type{?proto.my.system.person.Name} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Name, 2));
};


/** @param {?proto.my.system.person.Name|undefined} value */
proto.my.system.person.User.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.my.system.person.User.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.User.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.my.system.person.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.my.system.person.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Login login = 4;
 * @return {?proto.my.system.person.Login}
 */
proto.my.system.person.User.prototype.getLogin = function() {
  return /** @type{?proto.my.system.person.Login} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Login, 4));
};


/** @param {?proto.my.system.person.Login|undefined} value */
proto.my.system.person.User.prototype.setLogin = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.my.system.person.User.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.User.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Picture picture = 5;
 * @return {?proto.my.system.person.Picture}
 */
proto.my.system.person.User.prototype.getPicture = function() {
  return /** @type{?proto.my.system.person.Picture} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Picture, 5));
};


/** @param {?proto.my.system.person.Picture|undefined} value */
proto.my.system.person.User.prototype.setPicture = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.my.system.person.User.prototype.clearPicture = function() {
  this.setPicture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.User.prototype.hasPicture = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Location location = 6;
 * @return {?proto.my.system.person.Location}
 */
proto.my.system.person.User.prototype.getLocation = function() {
  return /** @type{?proto.my.system.person.Location} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Location, 6));
};


/** @param {?proto.my.system.person.Location|undefined} value */
proto.my.system.person.User.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.my.system.person.User.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.User.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool isactive = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.my.system.person.User.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.my.system.person.User.prototype.setIsactive = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Name.displayName = 'proto.my.system.person.Name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    first: jspb.Message.getFieldWithDefault(msg, 2, ""),
    last: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Name}
 */
proto.my.system.person.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Name;
  return proto.my.system.person.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Name}
 */
proto.my.system.person.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirst(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirst();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLast();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.my.system.person.Name.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.my.system.person.Name.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first = 2;
 * @return {string}
 */
proto.my.system.person.Name.prototype.getFirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.my.system.person.Name.prototype.setFirst = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last = 3;
 * @return {string}
 */
proto.my.system.person.Name.prototype.getLast = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.my.system.person.Name.prototype.setLast = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Location.displayName = 'proto.my.system.person.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    street: (f = msg.getStreet()) && proto.my.system.person.Street.toObject(includeInstance, f),
    city: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, ""),
    country: jspb.Message.getFieldWithDefault(msg, 4, ""),
    postcode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    coordinates: (f = msg.getCoordinates()) && proto.my.system.person.Geo.toObject(includeInstance, f),
    timezone: (f = msg.getTimezone()) && proto.my.system.person.TZ.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Location}
 */
proto.my.system.person.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Location;
  return proto.my.system.person.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Location}
 */
proto.my.system.person.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.my.system.person.Street;
      reader.readMessage(value,proto.my.system.person.Street.deserializeBinaryFromReader);
      msg.setStreet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostcode(value);
      break;
    case 6:
      var value = new proto.my.system.person.Geo;
      reader.readMessage(value,proto.my.system.person.Geo.deserializeBinaryFromReader);
      msg.setCoordinates(value);
      break;
    case 7:
      var value = new proto.my.system.person.TZ;
      reader.readMessage(value,proto.my.system.person.TZ.deserializeBinaryFromReader);
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.my.system.person.Street.serializeBinaryToWriter
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPostcode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCoordinates();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.my.system.person.Geo.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.my.system.person.TZ.serializeBinaryToWriter
    );
  }
};


/**
 * optional Street street = 1;
 * @return {?proto.my.system.person.Street}
 */
proto.my.system.person.Location.prototype.getStreet = function() {
  return /** @type{?proto.my.system.person.Street} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Street, 1));
};


/** @param {?proto.my.system.person.Street|undefined} value */
proto.my.system.person.Location.prototype.setStreet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.my.system.person.Location.prototype.clearStreet = function() {
  this.setStreet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.Location.prototype.hasStreet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string city = 2;
 * @return {string}
 */
proto.my.system.person.Location.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.my.system.person.Location.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.my.system.person.Location.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.my.system.person.Location.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string country = 4;
 * @return {string}
 */
proto.my.system.person.Location.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.my.system.person.Location.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string postcode = 5;
 * @return {string}
 */
proto.my.system.person.Location.prototype.getPostcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.my.system.person.Location.prototype.setPostcode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Geo coordinates = 6;
 * @return {?proto.my.system.person.Geo}
 */
proto.my.system.person.Location.prototype.getCoordinates = function() {
  return /** @type{?proto.my.system.person.Geo} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.Geo, 6));
};


/** @param {?proto.my.system.person.Geo|undefined} value */
proto.my.system.person.Location.prototype.setCoordinates = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.my.system.person.Location.prototype.clearCoordinates = function() {
  this.setCoordinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.Location.prototype.hasCoordinates = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TZ timezone = 7;
 * @return {?proto.my.system.person.TZ}
 */
proto.my.system.person.Location.prototype.getTimezone = function() {
  return /** @type{?proto.my.system.person.TZ} */ (
    jspb.Message.getWrapperField(this, proto.my.system.person.TZ, 7));
};


/** @param {?proto.my.system.person.TZ|undefined} value */
proto.my.system.person.Location.prototype.setTimezone = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.my.system.person.Location.prototype.clearTimezone = function() {
  this.setTimezone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.system.person.Location.prototype.hasTimezone = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Street = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Street, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Street.displayName = 'proto.my.system.person.Street';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Street.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Street.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Street} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Street.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Street}
 */
proto.my.system.person.Street.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Street;
  return proto.my.system.person.Street.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Street} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Street}
 */
proto.my.system.person.Street.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Street.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Street.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Street} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Street.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 number = 1;
 * @return {number}
 */
proto.my.system.person.Street.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.my.system.person.Street.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.my.system.person.Street.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.my.system.person.Street.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Geo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Geo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Geo.displayName = 'proto.my.system.person.Geo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Geo.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Geo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Geo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Geo.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Geo}
 */
proto.my.system.person.Geo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Geo;
  return proto.my.system.person.Geo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Geo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Geo}
 */
proto.my.system.person.Geo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Geo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Geo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Geo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Geo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.my.system.person.Geo.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.my.system.person.Geo.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.my.system.person.Geo.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.my.system.person.Geo.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.TZ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.TZ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.TZ.displayName = 'proto.my.system.person.TZ';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.TZ.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.TZ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.TZ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.TZ.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.TZ}
 */
proto.my.system.person.TZ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.TZ;
  return proto.my.system.person.TZ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.TZ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.TZ}
 */
proto.my.system.person.TZ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.TZ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.TZ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.TZ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.TZ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string offset = 1;
 * @return {string}
 */
proto.my.system.person.TZ.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.my.system.person.TZ.prototype.setOffset = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.my.system.person.TZ.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.my.system.person.TZ.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Login.displayName = 'proto.my.system.person.Login';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: msg.getUuid_asB64(),
    isloggedin: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Login}
 */
proto.my.system.person.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Login;
  return proto.my.system.person.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Login}
 */
proto.my.system.person.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsloggedin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIsloggedin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.my.system.person.Login.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.my.system.person.Login.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes uuid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.my.system.person.Login.prototype.getUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes uuid = 2;
 * This is a type-conversion wrapper around `getUuid()`
 * @return {string}
 */
proto.my.system.person.Login.prototype.getUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUuid()));
};


/**
 * optional bytes uuid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUuid()`
 * @return {!Uint8Array}
 */
proto.my.system.person.Login.prototype.getUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.my.system.person.Login.prototype.setUuid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool isloggedin = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.my.system.person.Login.prototype.getIsloggedin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.my.system.person.Login.prototype.setIsloggedin = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.system.person.Picture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.system.person.Picture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.system.person.Picture.displayName = 'proto.my.system.person.Picture';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.system.person.Picture.prototype.toObject = function(opt_includeInstance) {
  return proto.my.system.person.Picture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.system.person.Picture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Picture.toObject = function(includeInstance, msg) {
  var f, obj = {
    large: jspb.Message.getFieldWithDefault(msg, 1, ""),
    medium: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.system.person.Picture}
 */
proto.my.system.person.Picture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.system.person.Picture;
  return proto.my.system.person.Picture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.system.person.Picture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.system.person.Picture}
 */
proto.my.system.person.Picture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLarge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMedium(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.system.person.Picture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.system.person.Picture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.system.person.Picture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.my.system.person.Picture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLarge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMedium();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string large = 1;
 * @return {string}
 */
proto.my.system.person.Picture.prototype.getLarge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.my.system.person.Picture.prototype.setLarge = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string medium = 2;
 * @return {string}
 */
proto.my.system.person.Picture.prototype.getMedium = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.my.system.person.Picture.prototype.setMedium = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string thumbnail = 3;
 * @return {string}
 */
proto.my.system.person.Picture.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.my.system.person.Picture.prototype.setThumbnail = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.my.system.person);
